// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Piraeus.V1
{

    /// <summary>
    /// LinstorClusterSpec defines the desired state of LinstorCluster
    /// </summary>
    public class LinstorClusterSpecArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ApiTLS secures the LINSTOR API. 
        ///  This configures the TLS key and certificate used to secure the LINSTOR API.
        /// </summary>
        [Input("apiTLS")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Piraeus.V1.LinstorClusterSpecApiTLSArgs>? ApiTLS { get; set; }

        /// <summary>
        /// ExternalController references an external controller. When set, the Operator will skip deploying a LINSTOR Controller and instead use the external cluster to register satellites.
        /// </summary>
        [Input("externalController")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Piraeus.V1.LinstorClusterSpecExternalControllerArgs>? ExternalController { get; set; }

        /// <summary>
        /// InternalTLS secures the connection between LINSTOR Controller and Satellite. 
        ///  This configures the client certificate used when the Controller connects to a Satellite. This only has an effect when the Satellite is configured to for secure connections using `LinstorSatellite.spec.internalTLS`.
        /// </summary>
        [Input("internalTLS")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Piraeus.V1.LinstorClusterSpecInternalTLSArgs>? InternalTLS { get; set; }

        /// <summary>
        /// LinstorPassphraseSecret used to configure the LINSTOR master passphrase. 
        ///  The referenced secret must contain a single key "MASTER_PASSPHRASE". The master passphrase is used to * Derive encryption keys for volumes using the LUKS layer. * Store credentials for accessing remotes for backups. See https://linbit.com/drbd-user-guide/linstor-guide-1_0-en/#s-encrypt_commands for more information.
        /// </summary>
        [Input("linstorPassphraseSecret")]
        public Input<string>? LinstorPassphraseSecret { get; set; }

        [Input("nodeSelector")]
        private InputMap<string>? _nodeSelector;

        /// <summary>
        /// NodeSelector selects the nodes on which LINSTOR Satellites will be deployed. See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        /// </summary>
        public InputMap<string> NodeSelector
        {
            get => _nodeSelector ?? (_nodeSelector = new InputMap<string>());
            set => _nodeSelector = value;
        }

        [Input("patches")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Piraeus.V1.LinstorClusterSpecPatchesArgs>? _patches;

        /// <summary>
        /// Patches is a list of kustomize patches to apply. 
        ///  See https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/ for how to create patches.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Piraeus.V1.LinstorClusterSpecPatchesArgs> Patches
        {
            get => _patches ?? (_patches = new InputList<Pulumi.Kubernetes.Types.Inputs.Piraeus.V1.LinstorClusterSpecPatchesArgs>());
            set => _patches = value;
        }

        [Input("properties")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Piraeus.V1.LinstorClusterSpecPropertiesArgs>? _properties;

        /// <summary>
        /// Properties to apply on the cluster level. 
        ///  Use to create default settings for DRBD that should apply to all resources or to configure some other cluster wide default.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Piraeus.V1.LinstorClusterSpecPropertiesArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Pulumi.Kubernetes.Types.Inputs.Piraeus.V1.LinstorClusterSpecPropertiesArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// Repository used to pull workload images.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        public LinstorClusterSpecArgs()
        {
        }
        public static new LinstorClusterSpecArgs Empty => new LinstorClusterSpecArgs();
    }
}
