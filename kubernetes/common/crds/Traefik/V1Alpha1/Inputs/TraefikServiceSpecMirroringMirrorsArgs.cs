// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Traefik.V1Alpha1
{

    /// <summary>
    /// MirrorService holds the mirror configuration.
    /// </summary>
    public class TraefikServiceSpecMirroringMirrorsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Kind defines the kind of the Service.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
        /// </summary>
        [Input("nativeLB")]
        public Input<bool>? NativeLB { get; set; }

        /// <summary>
        /// PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
        /// </summary>
        [Input("passHostHeader")]
        public Input<bool>? PassHostHeader { get; set; }

        /// <summary>
        /// Percent defines the part of the traffic to mirror. Supported values: 0 to 100.
        /// </summary>
        [Input("percent")]
        public Input<int>? Percent { get; set; }

        /// <summary>
        /// Port defines the port of a Kubernetes Service. This can be a reference to a named port.
        /// </summary>
        [Input("port")]
        public InputUnion<int, string>? Port { get; set; }

        /// <summary>
        /// ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
        /// </summary>
        [Input("responseForwarding")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Traefik.V1Alpha1.TraefikServiceSpecMirroringMirrorsResponseForwardingArgs>? ResponseForwarding { get; set; }

        /// <summary>
        /// Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
        /// </summary>
        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        /// <summary>
        /// ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
        /// </summary>
        [Input("serversTransport")]
        public Input<string>? ServersTransport { get; set; }

        /// <summary>
        /// Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
        /// </summary>
        [Input("sticky")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Traefik.V1Alpha1.TraefikServiceSpecMirroringMirrorsStickyArgs>? Sticky { get; set; }

        /// <summary>
        /// Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        /// <summary>
        /// Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public TraefikServiceSpecMirroringMirrorsArgs()
        {
        }
        public static new TraefikServiceSpecMirroringMirrorsArgs Empty => new TraefikServiceSpecMirroringMirrorsArgs();
    }
}
