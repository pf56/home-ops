// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Traefik.V1Alpha1
{

    /// <summary>
    /// ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/
    /// </summary>
    public class MiddlewareSpecErrorsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Query defines the URL for the error page (hosted by service). The {status} variable can be used in order to insert the status code in the URL.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/#service
        /// </summary>
        [Input("service")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Traefik.V1Alpha1.MiddlewareSpecErrorsServiceArgs>? Service { get; set; }

        [Input("status")]
        private InputList<string>? _status;

        /// <summary>
        /// Status defines which status or range of statuses should result in an error page. It can be either a status code as a number (500), as multiple comma-separated numbers (500,502), as ranges by separating two codes with a dash (500-599), or a combination of the two (404,418,500-599).
        /// </summary>
        public InputList<string> Status
        {
            get => _status ?? (_status = new InputList<string>());
            set => _status = value;
        }

        public MiddlewareSpecErrorsArgs()
        {
        }
        public static new MiddlewareSpecErrorsArgs Empty => new MiddlewareSpecErrorsArgs();
    }
}
