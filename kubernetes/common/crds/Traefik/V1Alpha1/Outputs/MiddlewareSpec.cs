// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1
{

    /// <summary>
    /// MiddlewareSpec defines the desired state of a Middleware.
    /// </summary>
    [OutputType]
    public sealed class MiddlewareSpec
    {
        /// <summary>
        /// AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/addprefix/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecAddPrefix AddPrefix;
        /// <summary>
        /// BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecBasicAuth BasicAuth;
        /// <summary>
        /// Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#maxrequestbodybytes
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecBuffering Buffering;
        /// <summary>
        /// Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/chain/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecChain Chain;
        /// <summary>
        /// CircuitBreaker holds the circuit breaker configuration.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecCircuitBreaker CircuitBreaker;
        /// <summary>
        /// Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/compress/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecCompress Compress;
        /// <summary>
        /// ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecContentType ContentType;
        /// <summary>
        /// DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/digestauth/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecDigestAuth DigestAuth;
        /// <summary>
        /// ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecErrors Errors;
        /// <summary>
        /// ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecForwardAuth ForwardAuth;
        /// <summary>
        /// Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/headers/#customrequestheaders
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecHeaders Headers;
        /// <summary>
        /// InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecInFlightReq InFlightReq;
        /// <summary>
        /// IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecIpWhiteList IpWhiteList;
        /// <summary>
        /// PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/passtlsclientcert/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecPassTLSClientCert PassTLSClientCert;
        /// <summary>
        /// Plugin defines the middleware plugin configuration. More info: https://doc.traefik.io/traefik/plugins/
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableDictionary<string, object>> Plugin;
        /// <summary>
        /// RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ratelimit/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecRateLimit RateLimit;
        /// <summary>
        /// RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectregex/#regex
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecRedirectRegex RedirectRegex;
        /// <summary>
        /// RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectscheme/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecRedirectScheme RedirectScheme;
        /// <summary>
        /// ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepath/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecReplacePath ReplacePath;
        /// <summary>
        /// ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepathregex/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecReplacePathRegex ReplacePathRegex;
        /// <summary>
        /// Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/retry/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecRetry Retry;
        /// <summary>
        /// StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefix/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecStripPrefix StripPrefix;
        /// <summary>
        /// StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefixregex/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecStripPrefixRegex StripPrefixRegex;

        [OutputConstructor]
        private MiddlewareSpec(
            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecAddPrefix addPrefix,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecBasicAuth basicAuth,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecBuffering buffering,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecChain chain,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecCircuitBreaker circuitBreaker,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecCompress compress,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecContentType contentType,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecDigestAuth digestAuth,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecErrors errors,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecForwardAuth forwardAuth,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecHeaders headers,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecInFlightReq inFlightReq,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecIpWhiteList ipWhiteList,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecPassTLSClientCert passTLSClientCert,

            ImmutableDictionary<string, ImmutableDictionary<string, object>> plugin,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecRateLimit rateLimit,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecRedirectRegex redirectRegex,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecRedirectScheme redirectScheme,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecReplacePath replacePath,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecReplacePathRegex replacePathRegex,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecRetry retry,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecStripPrefix stripPrefix,

            Pulumi.Kubernetes.Types.Outputs.Traefik.V1Alpha1.MiddlewareSpecStripPrefixRegex stripPrefixRegex)
        {
            AddPrefix = addPrefix;
            BasicAuth = basicAuth;
            Buffering = buffering;
            Chain = chain;
            CircuitBreaker = circuitBreaker;
            Compress = compress;
            ContentType = contentType;
            DigestAuth = digestAuth;
            Errors = errors;
            ForwardAuth = forwardAuth;
            Headers = headers;
            InFlightReq = inFlightReq;
            IpWhiteList = ipWhiteList;
            PassTLSClientCert = passTLSClientCert;
            Plugin = plugin;
            RateLimit = rateLimit;
            RedirectRegex = redirectRegex;
            RedirectScheme = redirectScheme;
            ReplacePath = replacePath;
            ReplacePathRegex = replacePathRegex;
            Retry = retry;
            StripPrefix = stripPrefix;
            StripPrefixRegex = stripPrefixRegex;
        }
    }
}
